/*
 * Manuel Machado Copyright (C) 2021 This code is licensed under the MIT license (MIT)
 * (http://opensource.org/licenses/MIT)
 */

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "app_definitions.glsl"
#include "app_scene.glsl"

#include "../../framework/shaders/ray_tracing_apps/acc_structure.glsl"
#include "../../framework/shaders/ray_tracing_apps/trace_ray.glsl"
#include "../../framework/shaders/utils.glsl"

#ifdef STORE_DEPTH_MAP
layout(binding = 0, set = 5, r32f) uniform image2D imageDepth;
#endif

layout(binding = 0, set = 6) buffer ImageNormal_ { vec4 data[]; }
imageNormal;
layout(binding = 1, set = 6) buffer ImageAlbedo_ { vec4 data[]; }
imageAlbedo;
layout(binding = 2, set = 6) buffer ImageResult_ { vec4 data[]; }
imageResult;

layout(push_constant) uniform Constants
{
    uint maxDepth;
    uint samples;
};

const float RAY_DISTANCE = RAY_MAX_HIT - RAY_MIN_HIT;
const float CAMERA_DEFAULT_FOCAL_DEPTH = RAY_DISTANCE / 3.0f;

float estimateFocalDepth()
{
#ifdef STORE_DEPTH_MAP
    if (scene.frameChanged != 1) { // use the depth map of the previous frame
        vec2 sensorSize = gl_LaunchSizeEXT.xy / 128.0f;
        vec2 screenCenter = gl_LaunchSizeEXT.xy / 2.0f;
        float samp = imageLoad(imageDepth, ivec2(screenCenter.x, screenCenter.y - sensorSize.y)).r;
        samp += imageLoad(imageDepth, ivec2(screenCenter.x, screenCenter.y + sensorSize.y)).r;
        samp += imageLoad(imageDepth, ivec2(screenCenter)).r;
        samp += imageLoad(imageDepth, ivec2(screenCenter.x - sensorSize.x, screenCenter.y)).r;
        samp += imageLoad(imageDepth, ivec2(screenCenter.x + sensorSize.x, screenCenter.y)).r;
        samp /= 5.0f;
        return RAY_DISTANCE * samp;
    }
#endif
    return CAMERA_DEFAULT_FOCAL_DEPTH;
}

void main()
{
    vec3 result = vec3(0.0f);
    vec3 hitDistance = vec3(0.0f);
    vec3 hitNormal = vec3(0.0f);
    vec3 hitAlbedo = vec3(0.0f);
#ifdef DEPTH_OF_FIELD
    const float focalLength = estimateFocalDepth();
#endif
#ifdef SAMPLE_PRIMARY
    for (int n = 0; n < samples; ++n) {
#else
    const int n = 0;
    {
#endif
        // Initialize aux variables for iteration
        vec3 transportFactor = vec3(1.0f);
        vec3 sampleResult = vec3(0.0f);
        rayPayload.seed
            = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, scene.frame + n);
        rayPayload.done = 0;
        rayPayload.surfaceAttenuation = vec3(1.0f);
        rayPayload.surfaceRadiance = vec3(0.0f);
        rayPayload.surfaceEmissive = vec3(0.0f);
        rayPayload.rayType = RAY_TYPE_UNDEFINED;
        // ---

        // Antialiasing.
        const float r1 = rnd(rayPayload.seed);
        const float r2 = rnd(rayPayload.seed);
        const vec2 subpixelJitter
            = (scene.frameIteration + n) == 0 ? vec2(0.0f, 0.0f) : vec2(r1 - 0.5f, r2 - 0.5f);
        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f) + subpixelJitter;
        const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
        const vec2 thetaOut = inUV * 2.0f - 1.0f;
        const vec4 target = scene.projInverse * vec4(thetaOut.x, thetaOut.y, 1.0f, 1.0f);
        // ---

        // Initial Origin and Direction
        vec3 origin = (scene.viewInverse * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
        vec3 direction = (scene.viewInverse * vec4(normalize(target.xyz / target.w), 0.0f)).xyz;
        // ---

#ifdef DEPTH_OF_FIELD
        //	randomize the ray on the surface of the lense, going through the focal point
        float angle = r1 * 2.0 * M_PIf;
        float radius = r2;
        vec2 circPoint = vec2(cos(angle) * radius, sin(angle) * radius);
        vec3 apertureInc = vec3(circPoint.x * CAMERA_APERTURE, circPoint.y * CAMERA_APERTURE, 0.0f);
        origin += apertureInc;
        direction *= focalLength;
        direction -= apertureInc;
        direction = normalize(direction);
#endif

        // Direct Illum
        uint depth = 0;
        float resultDistance = 0.0f;
        for (depth; depth < maxDepth; ++depth) {
            trace_ray(origin, direction, RAY_MIN_HIT, RAY_MAX_HIT);
            origin = rayPayload.nextRayOrigin;
            direction = rayPayload.nextRayDirection;
            if (depth == 0) {
                resultDistance = rayPayload.hitDistance;
                hitNormal += rayPayload.surfaceNormal;
                hitAlbedo += min(rayPayload.surfaceEmissive + rayPayload.surfaceAttenuation, vec3(1.0f));
            }
            if (rayPayload.rayType == RAY_TYPE_DIFFUSE) {
                sampleResult = rayPayload.surfaceEmissive + rayPayload.surfaceRadiance / M_PIf;
                transportFactor = rayPayload.surfaceAttenuation;
                break;
            } else if (rayPayload.rayType == RAY_TYPE_MISS) {
                sampleResult = rayPayload.surfaceRadiance;
                // Not necessary because rayPayload.done is 1 :
                //      transportFactor = rayPayload.surfaceAttenuation;
                break;
            }
        }
        // End Direct Illum ---

#ifdef STORE_DEPTH_MAP
        hitDistance += resultDistance / RAY_DISTANCE;
#endif

        // Indirect Illum
        for (depth; depth < maxDepth; ++depth) {
            if (rayPayload.done == 1) {
                break;
            }
            trace_ray(origin, direction, RAY_MIN_HIT, RAY_MAX_HIT);
            if (rayPayload.rayType == RAY_TYPE_DIFFUSE) {
                sampleResult
                    += rayPayload.surfaceEmissive + rayPayload.surfaceRadiance * transportFactor;
                transportFactor *= rayPayload.surfaceAttenuation;
                // Note: The PDF division is implicit here because for cosine sample
                // "PDF = cosTheta / PI":
                // => cosTheta is cancelled in "(Li * cosTheta * brdf) / PDF"
                // => (1 / PI) is cancelled in the division by PI.
                // As a result only the direct ilumination is divided by PI
            } else if (rayPayload.rayType == RAY_TYPE_MISS) {
                sampleResult += rayPayload.surfaceRadiance * transportFactor;
            }
            origin = rayPayload.nextRayOrigin;
            direction = rayPayload.nextRayDirection;
        }
        // End Indirect Illum ---
        // Clamp result
        result += min(sampleResult, vec3(1.0f));
        // ---
    }
#ifdef SAMPLE_PRIMARY
    result /= float(samples);

#ifdef STORE_DEPTH_MAP
    hitDistance /= float(samples);
#endif

    hitAlbedo /= float(samples);
    hitNormal /= float(samples);

#endif

#ifdef SHOW_NANS
    // Error "handling"
    if (is_nan(result)) {
        result = vec3(1.0f, 0.0f, 0.0f);
    }
#endif

    uint bufferImageIdx = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;
    if (scene.frameIteration > 0) {
        // Do accumulation (imageResult should be rgba32f to avoid losing precision)
        const float a = 1.0f / float(scene.frameIteration);
        const vec4 oldColor = imageResult.data[bufferImageIdx];
        imageResult.data[bufferImageIdx] = vec4(mix(oldColor.xyz, result, a), 1.0f);
    } else {
        imageResult.data[bufferImageIdx] = vec4(result, 1.0f);
    }
#ifdef STORE_DEPTH_MAP
    imageStore(imageDepth, ivec2(gl_LaunchIDEXT.xy), vec4(hitDistance, 1.0f));
#endif
    imageAlbedo.data[bufferImageIdx] = vec4(hitAlbedo, 1.0f);
    imageNormal.data[bufferImageIdx] = vec4(normalize(hitNormal * 0.5 + 0.5), 1.0f);
}
