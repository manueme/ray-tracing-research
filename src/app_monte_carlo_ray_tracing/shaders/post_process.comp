/*
 * Manuel Machado Copyright (C) 2021 This code is licensed under the MIT license (MIT)
 * (http://opensource.org/licenses/MIT)
 */

#version 450

#extension GL_GOOGLE_include_directive : enable

#define SCENE_SET 0 // override SCENE_SET for this particular case
#include "../../framework/shaders/exposure_functions.glsl"
#include "app_scene.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 1, binding = 0) uniform sampler2D inputTexture;
layout(set = 2, binding = 0) readonly buffer _AutoExposure { float exposure; }
exposureSettings;
layout(set = 3, binding = 0, rgba8) uniform image2D outputTexture;

void main()
{
    vec2 res = textureSize(inputTexture, 0);
    vec2 q = gl_GlobalInvocationID.xy / res;
    if (q.x > 1 || q.y > 1) {
        return;
    }

    // Vignette fffect
    vec2 v = -1.0 + 2.0 * q;
    v.x *= res.x / res.y;
    float vignette = smoothstep(4.0, 0.6, length(v));
    // ###

    // Chromatic aberration effect with tone mapping
    vec2 centerToUv = q - vec2(0.5);
    vec3 aberr;
    aberr.x = texture(inputTexture, vec2((0.5 + centerToUv * 0.995))).x;
    aberr.y = texture(inputTexture, vec2((0.5 + centerToUv * 0.997))).y;
    aberr.z = texture(inputTexture, vec2((0.5 + centerToUv))).z;

    vec4 result = vec4(
        (vignette
            * linear_tone_mapping(aberr, exposureSettings.exposure + scene.manualExposureAdjust)),
        1.0);
    // ###

    imageStore(outputTexture, ivec2(gl_GlobalInvocationID.xy), result);
}