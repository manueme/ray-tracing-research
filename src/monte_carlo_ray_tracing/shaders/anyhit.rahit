#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "../../framework/shaders/constants.h"
#include "../../framework/shaders/definitions.glsl"
#include "vertex.glsl"

hitAttributeEXT vec3 attribs;

layout(binding = 0, set = 2) uniform sampler2D textures[];
layout(binding = 1, set = 2) buffer _Materials { MaterialProperties m[]; }
materials;

void main()
{
    const Surface hitSurface = get_surface_instance(gl_InstanceID, gl_PrimitiveID, attribs.xy);
    const uint materialIndex = instanceInfo.i[gl_InstanceID].materialIndex;
    const MaterialProperties material = materials.m[materialIndex];
    const int diffuseMapIndex = material.diffuseMapIndex;
    bool ignore = false;
    if (diffuseMapIndex >= 0) {
        const vec2 uv = get_surface_uv(hitSurface);
        ignore = texture(textures[nonuniformEXT(diffuseMapIndex)], uv).w == 0
            && material.refractIdx == NOT_REFRACTIVE_IDX;
    } else {
        ignore = material.opacity == 0 && material.refractIdx == NOT_REFRACTIVE_IDX;
    }
    if (ignore) {
        ignoreIntersectionEXT;
    }
}
