/*
 * Manuel Machado Copyright (C) 2021 This code is licensed under the MIT license (MIT)
 * (http://opensource.org/licenses/MIT)
 */

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "../../framework/shaders/common.glsl"
#include "../../framework/shaders/constants.h"
#include "../../framework/shaders/definitions.glsl"
#include "./hybrid_constants.h"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(location = RT_PAYLOAD_SHADOW) rayPayloadEXT RayPayloadShadow rayPayloadShadow;
layout(location = RT_PAYLOAD_BRDF) rayPayloadEXT RayPayload rayPayloadBRDF;

layout(binding = 0, set = 4) buffer _Lights { LightProperties l[]; }
lighting;

layout(binding = 0, set = 5) uniform sampler2D inputColor;
layout(binding = 1, set = 5) uniform sampler2D inputNormals;
layout(binding = 2, set = 5) uniform sampler2D inputReflectRefractMap;
layout(binding = 3, set = 5) uniform sampler2D inputDepth;
layout(binding = 0, set = 6, rgba8) uniform image2D resultImage;

layout(binding = 0, set = 1) uniform _SceneProperties
{
    mat4 projection;
    mat4 model;
    mat4 view;
    mat4 viewInverse;
    mat4 projInverse;
    vec4 overrideSunDirection;
}
scene;

float trace_shadow_ray(vec3 origin, vec3 direction, float maxDistance)
{
    const uint rayFlags = gl_RayFlagsTerminateOnFirstHitEXT;
    rayPayloadShadow.shadowAmount = 0.0f;
    traceRayEXT(topLevelAS,
        rayFlags,
        AS_FLAG_EVERYTHING,
        SBT_MC_SHADOW_HIT_GROUP /*sbtRecordOffset*/,
        0 /*sbtRecordStride*/,
        SBT_MC_SHADOW_MISS_INDEX /*missIndex*/,
        origin,
        CAMERA_NEAR,
        direction,
        maxDistance,
        RT_PAYLOAD_SHADOW);
    return rayPayloadShadow.shadowAmount;
}

void trace_ray(vec3 origin, vec3 direction)
{
    uint rayFlags = gl_RayFlagsNoneEXT;
    traceRayEXT(topLevelAS,
        rayFlags,
        AS_FLAG_EVERYTHING,
        SBT_MC_HIT_GROUP /*sbtRecordOffset*/,
        0 /*sbtRecordStride*/,
        SBT_MC_MISS_INDEX /*missIndex*/,
        origin,
        CAMERA_NEAR,
        direction,
        CAMERA_FAR,
        RT_PAYLOAD_BRDF);
}

float get_hit_depth(vec2 inUV)
{
    const float surfaceDepth = texelFetch(inputDepth, ivec2(gl_LaunchIDEXT.xy), 0).x;
    const vec4 clipSpacePosition = vec4(inUV * 2.0f - 1.0f, surfaceDepth, 1.0f);
    vec4 viewSpacePosition = scene.projInverse * clipSpacePosition;
    viewSpacePosition /= viewSpacePosition.w;
    return length(viewSpacePosition.xyz);
}

void main()
{
    vec4 result = vec4(0.0);
    vec4 originalColor = texelFetch(inputColor, ivec2(gl_LaunchIDEXT.xy), 0);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 thetaOut = inUV * 2.0f - 1.0f;
    const vec4 target = scene.projInverse * vec4(thetaOut.x, thetaOut.y, 1.0f, 1.0f);
    vec3 origin = (scene.viewInverse * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    vec3 direction = (scene.viewInverse * vec4(normalize(target.xyz / target.w), 0.0f)).xyz;
    const float hitDepth = get_hit_depth(inUV);

    if (hitDepth < CAMERA_FAR - CAMERA_NEAR) {

        const vec3 hitPoint = origin + direction * hitDepth;
        vec3 shadingNormal = texelFetch(inputNormals, ivec2(gl_LaunchIDEXT.xy), 0).xyz;

        const vec4 reflectRefractData
            = texelFetch(inputReflectRefractMap, ivec2(gl_LaunchIDEXT.xy), 0).xyzw;
        float reflectionPercent = reflectRefractData.x;
        float refractionPercent = reflectRefractData.y;
        float ior = reflectRefractData.z;
        float surfaceOpacity = reflectRefractData.w;
        vec3 refractions = vec3(0.0f);
        if (refractionPercent > 0.0) { // REFRACT RAY
            const vec3 refractionRayDirection = refract(direction, shadingNormal, ior);
            if (!is_zero(refractionRayDirection)) {
                rayPayloadBRDF.surfaceAttenuation = vec3(1.0f);
                rayPayloadBRDF.surfaceRadiance = vec3(0.0f);
                rayPayloadBRDF.surfaceEmissive = vec3(0.0f);
                trace_ray(hitPoint, refractionRayDirection);
                refractions = rayPayloadBRDF.surfaceEmissive + rayPayloadBRDF.surfaceRadiance;
                refractions *= refractionPercent;
            } else {
                refractionPercent = 0.0f;
            }
        }
        vec3 reflections = vec3(0.0f);
        if (reflectionPercent > 0.0) { // REFLECT RAY
            rayPayloadBRDF.surfaceAttenuation = vec3(1.0f);
            rayPayloadBRDF.surfaceRadiance = vec3(0.0f);
            rayPayloadBRDF.surfaceEmissive = vec3(0.0f);
            trace_ray(hitPoint, reflect(direction, shadingNormal));
            reflections = rayPayloadBRDF.surfaceEmissive + rayPayloadBRDF.surfaceRadiance;
            reflections *= reflectionPercent;
        }

        const float refractReflectComplement = (1.0f - (reflectionPercent + refractionPercent));
        if (refractReflectComplement > 0.0f) {
            const float shadowWeight = 1.0 - AMBIENT_WEIGHT;
            for (int i = 0; i < lighting.l.length(); ++i) {
                const LightProperties light = lighting.l[i];
                vec3 lightDir = vec3(0.0f);
                vec3 lightIntensity = vec3(0.0f);
                float maxHitDistance = CAMERA_FAR;
                if (light.lightType == 1) { // Directional light (SUN)
                    lightDir = light.direction.xyz + vec3(scene.overrideSunDirection);
                    lightIntensity = light.diffuse.rgb;
                    lightDir = normalize(lightDir);
                } else {
                    continue;
                }

                const float cosThetaLight = abs(dot(shadingNormal, lightDir));
                if (cosThetaLight > 0) {
                    const float visibility = (1.0
                        - shadowWeight * trace_shadow_ray(hitPoint, -lightDir, maxHitDistance));
                    originalColor *= vec4(visibility * lightIntensity, 1.0);
                }
            }
        }
        result
            = vec4(reflections + refractions + originalColor.xyz * refractReflectComplement, 1.0);
    } else {
        result = vec4(sky_ray(-direction), 1.0);
    }
    imageStore(resultImage, ivec2(gl_LaunchIDEXT.xy), result);
}
