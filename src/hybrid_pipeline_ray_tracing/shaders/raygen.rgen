/*
 * Manuel Machado Copyright (C) 2021 This code is licensed under the MIT license (MIT)
 * (http://opensource.org/licenses/MIT)
 */

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "../../framework/shaders/constants.h"
#include "../../framework/shaders/definitions.glsl"
#include "./hybrid_constants.h"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(location = RT_PAYLOAD_SHADOW) rayPayloadEXT RayPayloadShadow rayPayloadShadow;

layout(binding = 0, set = 4) buffer _Lights { LightProperties l[]; }
lighting;

layout(binding = 0, set = 5) uniform sampler2D inputColor;
layout(binding = 1, set = 5) uniform sampler2D inputDepth;
layout(binding = 0, set = 6, rgba8) uniform image2D inputNormals;
layout(binding = 1, set = 6, rgba8) uniform image2D resultImage;

layout(binding = 0, set = 1) uniform _SceneProperties
{
    mat4 projection;
    mat4 model;
    mat4 view;
    mat4 viewInverse;
    mat4 projInverse;
    vec4 overrideSunDirection;
}
scene;

float trace_shadow_ray(vec3 origin, vec3 direction, int instanceMask, float maxDistance)
{
    const uint rayFlags = gl_RayFlagsTerminateOnFirstHitEXT;
    rayPayloadShadow.shadowAmount = 0.0f;
    traceRayEXT(topLevelAS,
        rayFlags,
        instanceMask,
        SBT_MC_SHADOW_HIT_GROUP /*sbtRecordOffset*/,
        0 /*sbtRecordStride*/,
        SBT_MC_SHADOW_MISS_INDEX /*missIndex*/,
        origin,
        CAMERA_NEAR,
        direction,
        maxDistance,
        RT_PAYLOAD_SHADOW);
    return rayPayloadShadow.shadowAmount;
}

float get_hit_depth(vec2 inUV)
{
    const float surfaceDepth = texelFetch(inputDepth, ivec2(gl_LaunchIDEXT.xy), 0).x;
    const vec4 clipSpacePosition = vec4(inUV * 2.0f - 1.0f, surfaceDepth, 1.0f);
    vec4 viewSpacePosition = scene.projInverse * clipSpacePosition;
    viewSpacePosition /= viewSpacePosition.w;
    return length(viewSpacePosition.xyz);
}

void main()
{
    vec3 result = texelFetch(inputColor, ivec2(gl_LaunchIDEXT.xy), 0).xyz;
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 thetaOut = inUV * 2.0f - 1.0f;
    const vec4 target = scene.projInverse * vec4(thetaOut.x, thetaOut.y, 1.0f, 1.0f);

    // Initial Origin, Direction and Hit Depth
    vec3 origin = (scene.viewInverse * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    vec3 direction = (scene.viewInverse * vec4(normalize(target.xyz / target.w), 0.0f)).xyz;
    const float hitDepth = get_hit_depth(inUV);
    const vec3 hitPoint = origin.xyz + direction.xyz * hitDepth;
    // ---

    const vec3 shadingNormal = imageLoad(inputNormals, ivec2(gl_LaunchIDEXT.xy)).xyz;

    const float shadowWeight = 1.0 - AMBIENT_WEIGHT;
    for (int i = 0; i < lighting.l.length(); ++i) {
        const LightProperties light = lighting.l[i];
        vec3 lightDir = vec3(0.0f);
        vec3 lightIntensity = vec3(0.0f);
        float maxHitDistance = CAMERA_FAR;
        if (light.lightType == 1) { // Directional light (SUN)
            lightDir = light.direction.xyz + vec3(scene.overrideSunDirection);
            lightIntensity = light.diffuse.rgb * SUN_POWER;
            lightDir = normalize(lightDir);
        } else {
            continue;
        }

        const float cosThetaLight = abs(dot(shadingNormal, lightDir));
        if (cosThetaLight > 0) {
            const float visibility = (1.0
                - shadowWeight
                    * trace_shadow_ray(hitPoint, -lightDir, AS_FLAG_EVERYTHING, maxHitDistance));
            result *= visibility * lightIntensity;
        }
    }

    imageStore(resultImage, ivec2(gl_LaunchIDEXT.xy), vec4(result, 1.0f));
}
