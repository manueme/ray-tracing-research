/*
 * Manuel Machado Copyright (C) 2021 This code is licensed under the MIT license (MIT)
 * (http://opensource.org/licenses/MIT)
 */

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "app_definitions.glsl"
#include "app_scene.glsl"

#include "../../framework/shaders/ray_tracing_apps/acc_structure.glsl"
#include "../../framework/shaders/ray_tracing_apps/lights.glsl"
#include "../../framework/shaders/ray_tracing_apps/trace_ray.glsl"
#include "../../framework/shaders/ray_tracing_apps/trace_shadow_ray_utils.glsl"
#include "../../framework/shaders/utils.glsl"

layout(binding = 0, set = 5) uniform sampler2D inputMaterial;
layout(binding = 1, set = 5) uniform sampler2D inputAlbedo;
layout(binding = 2, set = 5) uniform sampler2D inputNormals;
layout(binding = 3, set = 5) uniform sampler2D inputReflectRefractMap;
layout(binding = 4, set = 5) uniform sampler2D inputDepth;
layout(binding = 0, set = 6, rgba8) uniform image2D resultImage;

layout(push_constant) uniform Constants
{
    uint maxDepth;
    uint samples;
};

float get_hit_depth(vec2 inUV)
{
    const float surfaceDepth = texture(inputDepth, inUV).x;
    const vec4 clipSpacePosition = vec4(inUV * 2.0f - 1.0f, surfaceDepth, 1.0f);
    vec4 viewSpacePosition = scene.projInverse * clipSpacePosition;
    viewSpacePosition /= viewSpacePosition.w;
    return length(viewSpacePosition.xyz);
}

void reset_payload()
{
    rayPayload.done = 0;
    rayPayload.depth = 0;
    rayPayload.surfaceAttenuation = vec3(1.0f);
    rayPayload.surfaceRadiance = vec3(0.0f);
    rayPayload.rayType = RAY_TYPE_UNDEFINED;
}

const float RAY_DISTANCE = CAMERA_FAR - CAMERA_NEAR;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 thetaOut = inUV * 2.0f - 1.0f;
    const vec4 target = scene.projInverse * vec4(thetaOut.x, thetaOut.y, 1.0f, 1.0f);
    vec3 direction = (scene.viewInverse * vec4(normalize(target.xyz / target.w), 0.0f)).xyz;
    const float hitDepth = get_hit_depth(inUV);

    vec4 result;
    if (hitDepth < RAY_DISTANCE) {
        vec3 origin = (scene.viewInverse * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
        // CAMERA_NEAR is substracted to the depht to be consistent with the depth map:
        const vec3 hitPoint = origin + direction * (hitDepth - CAMERA_NEAR);
        // ---
        vec3 shadingNormal = texture(inputNormals, inUV).xyz;
        const vec4 reflectRefractData = texture(inputReflectRefractMap, inUV).xyzw;
        float alphaWithoutRefractives = reflectRefractData.w;

        // ####  Get surface albedo ####
        vec4 surfaceAlbedo = texture(inputAlbedo, inUV);

        // ####  Get surface material information ####
        vec4 matInformation = texture(inputMaterial, inUV);
        float shininessStrength = matInformation.x;
        float shininess = matInformation.y;
        // uint materialIndex = uint(matInformation.z);

        // Trace recursive refractions and reflections
        float reflectionPercent = reflectRefractData.x;
        float refractionPercent = reflectRefractData.y;
        float ior = reflectRefractData.z;
        vec3 refractions = vec3(0.0f);
        if (refractionPercent > 0.0f) { // REFRACT RAY
            vec3 refractionRayDirection = refract(direction, shadingNormal, ior);
            vec3 refractionPoint = hitPoint;
            if (!is_zero(refractionRayDirection)) {
                reset_payload();
                trace_ray(refractionPoint, refractionRayDirection, 0.0f, CAMERA_FAR);
                refractions = vec3(rayPayload.surfaceRadiance);
            } else {
                refractionPercent = 0.0f;
            }
        }
        vec3 reflections = vec3(0.0f);
        if (reflectionPercent > 0.0f) { // REFLECT RAY
            vec3 reflectionRayDirection = reflect(direction, shadingNormal);
            vec3 reflectionPoint = hitPoint;
            reset_payload();
            trace_ray(reflectionPoint, reflectionRayDirection, 0.0f, CAMERA_FAR);
            reflections = vec3(rayPayload.surfaceRadiance);
        }
        reset_payload();

        vec3 reflectRefractResult
            = reflections * reflectionPercent + refractions * refractionPercent;
        float surfacePercent = (1.0f - (reflectionPercent + refractionPercent));
        // ---

        vec4 surfaceColor = vec4(reflectRefractResult, alphaWithoutRefractives);
        if (surfacePercent > 0.0f) { // Compute direct illumination
            // Shadows need more precision,
            // the further the hit was, the less prcise the depth map is:
            const vec3 shadowHitPoint
                = origin + direction * (hitDepth - CAMERA_NEAR * (hitDepth / RAY_DISTANCE));

            vec3 diffuse = vec3(0.0);
            vec3 specular = vec3(0.0);
            vec3 ambient = vec3(AMBIENT_WEIGHT);
            for (int i = 0; i < lighting.l.length(); ++i) {
                const LightProperties light = lighting.l[i];
                vec3 lightDir = vec3(0.0f);
                vec3 lightIntensity = vec3(0.0f);
                if (light.lightType == 1) { // Directional light (SUN)
                    lightIntensity = sample_sun_light(light,
                        scene.overrideSunDirection.xyz,
                        shadowHitPoint,
                        0.0f,
                        lightDir);
                } else {
                    continue;
                }
                const float cosThetaLight = abs(dot(shadingNormal, lightDir));
                diffuse += lightIntensity * cosThetaLight;
                if (shininessStrength == 0) {
                    continue;
                }
                const vec3 r = reflect(lightDir, shadingNormal);
                specular += lightIntensity * pow(max(0, dot(r, direction)), shininess)
                    * shininessStrength;
            }
            vec3 surfaceRadiance = (max(diffuse, ambient) + specular) * surfaceAlbedo.xyz;

            surfaceColor += vec4(surfaceRadiance * surfacePercent, 0.0);
        }
        result = clamp(surfaceColor, vec4(0.0), vec4(1.0));
    } else {
        result = vec4(sky_ray(-direction), 1.0);
    }
    imageStore(resultImage, ivec2(gl_LaunchIDEXT.xy), result);
}
